<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.work.auth.dao.RoleDao">
  <resultMap id="BaseResultMap" type="com.work.auth.pojo.Role">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="role_des" jdbcType="VARCHAR" property="roleDes" />
    <result column="role_status" jdbcType="VARCHAR" property="roleStatus" />
    <result column="role_sort" jdbcType="INTEGER" property="roleSort" />
    <result column="create_user_id" jdbcType="VARCHAR" property="createUserId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_user_id" jdbcType="VARCHAR" property="updateUserId" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, role_name, role_des, role_status, role_sort, create_user_id, create_time, update_user_id, 
    update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from role
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.work.auth.pojo.Role" useGeneratedKeys="true">
    insert into role (role_name, role_des, role_status, 
      role_sort, create_user_id, create_time, 
      update_user_id, update_time)
    values (#{roleName,jdbcType=VARCHAR}, #{roleDes,jdbcType=VARCHAR}, #{roleStatus,jdbcType=VARCHAR}, 
      #{roleSort,jdbcType=INTEGER}, #{createUserId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateUserId,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.work.auth.pojo.Role" useGeneratedKeys="true">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleName != null">
        role_name,
      </if>
      <if test="roleDes != null">
        role_des,
      </if>
      <if test="roleStatus != null">
        role_status,
      </if>
      <if test="roleSort != null">
        role_sort,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDes != null">
        #{roleDes,jdbcType=VARCHAR},
      </if>
      <if test="roleStatus != null">
        #{roleStatus,jdbcType=VARCHAR},
      </if>
      <if test="roleSort != null">
        #{roleSort,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.work.auth.pojo.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDes != null">
        role_des = #{roleDes,jdbcType=VARCHAR},
      </if>
      <if test="roleStatus != null">
        role_status = #{roleStatus,jdbcType=VARCHAR},
      </if>
      <if test="roleSort != null">
        role_sort = #{roleSort,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.work.auth.pojo.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_des = #{roleDes,jdbcType=VARCHAR},
      role_status = #{roleStatus,jdbcType=VARCHAR},
      role_sort = #{roleSort,jdbcType=INTEGER},
      create_user_id = #{createUserId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>